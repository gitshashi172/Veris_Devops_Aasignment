(1)Creating a VPC with two public and private subnets can be done using a CloudFormation script in AWS. Below is an example CloudFormation template that 
achieves this setup:


AWSTemplateFormatVersion: '2010-09-09'
Description: Create a VPC with ALB, ELB, Route53 Hosted Zone, Security Groups, and IAM Policy

Parameters:
  VpcCIDR:
    Description: CIDR block for the VPC
    Type: String
    Default: '10.0.0.0/16'

Resources:
  MyVPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true

  PublicSubnet1:
    Type: 'AWS::EC2::Subnet'  
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: '10.0.1.0/24'  
      AvailabilityZone: 'us-east-1a'

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: '10.0.2.0/24'  
      AvailabilityZone: 'us-east-1b'

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: '10.0.3.0/24' 
      AvailabilityZone: 'us-east-1a'

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: '10.0.4.0/24'
      AvailabilityZone: 'us-east-1b'

  PublicRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MyVPC

  PublicRouteTable2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MyVPC

  PrivateRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MyVPC

  PrivateRouteTable2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MyVPC

  PublicRoute1:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable1
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref InternetGateway
    DependsOn: InternetGatewayAttachment

  PublicRoute2:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable2
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref InternetGateway
    DependsOn: InternetGatewayAttachment

  AssociatePublicSubnetWithRouteTable1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable1

  AssociatePublicSubnetWithRouteTable2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable2

  AssociatePrivateSubnetWithRouteTable1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable1

  AssociatePrivateSubnetWithRouteTable2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref PrivateRouteTable2

  InternetGateway:
    Type: AWS::EC2::InternetGateway

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref MyVPC
      InternetGatewayId: !Ref InternetGateway

  ELBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow traffic on ports 80 and 443 for ELB
      VpcId: !Ref MyVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0

  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow traffic on ports 80 and 443 for ALB
      VpcId: !Ref MyVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0

  ELB:
    Type: AWS::ElasticLoadBalancing::LoadBalancer
    Properties:
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      SecurityGroups:
        - !Ref ELBSecurityGroup

  ALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      SecurityGroups:
        - !Ref ALBSecurityGroup
      Type: application

  PrivateHostedZone:
    Type: AWS::Route53::HostedZone
    Properties:
      Name: "demo.com."
      VPCs:
        - VPCId: !Ref MyVPC
          VPCRegion: !Ref AWS::Region

  ALBDNSRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !Ref PrivateHostedZone
      Name: "alb.demo.com."
      Type: "CNAME"
      TTL: "300"
      ResourceRecords:
        - !GetAtt ALB.DNSName

  ELBDNSRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !Ref PrivateHostedZone
      Name: "elb.demo.com."
      Type: "CNAME"
      TTL: "300"
      ResourceRecords:


AWS CloudFormation script that creates an IAM policy allowing EC2 instance management:
AWSTemplateFormatVersion: '2010-09-09'
Resources:
  EC2Policy:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: EC2ManagementPolicy
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Action:
              - 'ec2:StartInstances'
              - 'ec2:StopInstances'
              - 'ec2:DescribeInstances'
              - 'ec2:RebootInstances'
              - 'ec2:TerminateInstances'
            Resource: '*'
      Roles:
        - Ref: EC2Role
  EC2Role:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              Service: 'ec2.amazonaws.com'
            Action: 'sts:AssumeRole'
      Path: '/'
This CloudFormation script creates an IAM policy (EC2ManagementPolicy) allowing actions like starting, stopping, describing, rebooting, and terminating EC2 
instances. It associates this policy with an IAM role (EC2Role) that allows EC2 instances to assume this role.

